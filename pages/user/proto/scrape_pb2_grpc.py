# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import scrape_pb2 as proto_dot_scrape__pb2


class ScrapeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Scrape = channel.unary_unary(
                '/scrape.ScrapeService/Scrape',
                request_serializer=proto_dot_scrape__pb2.ScrapeRequest.SerializeToString,
                response_deserializer=proto_dot_scrape__pb2.ScrapeResponse.FromString,
                )
        self.IsScrapingDone = channel.unary_unary(
                '/scrape.ScrapeService/IsScrapingDone',
                request_serializer=proto_dot_scrape__pb2.ScrapeStatusRequest.SerializeToString,
                response_deserializer=proto_dot_scrape__pb2.ScrapeStatusResponse.FromString,
                )
        self.GetScrapingBlob = channel.unary_unary(
                '/scrape.ScrapeService/GetScrapingBlob',
                request_serializer=proto_dot_scrape__pb2.ScrapeBlobRequest.SerializeToString,
                response_deserializer=proto_dot_scrape__pb2.ScrapeBlobResponse.FromString,
                )


class ScrapeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Scrape(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsScrapingDone(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetScrapingBlob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ScrapeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Scrape': grpc.unary_unary_rpc_method_handler(
                    servicer.Scrape,
                    request_deserializer=proto_dot_scrape__pb2.ScrapeRequest.FromString,
                    response_serializer=proto_dot_scrape__pb2.ScrapeResponse.SerializeToString,
            ),
            'IsScrapingDone': grpc.unary_unary_rpc_method_handler(
                    servicer.IsScrapingDone,
                    request_deserializer=proto_dot_scrape__pb2.ScrapeStatusRequest.FromString,
                    response_serializer=proto_dot_scrape__pb2.ScrapeStatusResponse.SerializeToString,
            ),
            'GetScrapingBlob': grpc.unary_unary_rpc_method_handler(
                    servicer.GetScrapingBlob,
                    request_deserializer=proto_dot_scrape__pb2.ScrapeBlobRequest.FromString,
                    response_serializer=proto_dot_scrape__pb2.ScrapeBlobResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scrape.ScrapeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ScrapeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Scrape(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scrape.ScrapeService/Scrape',
            proto_dot_scrape__pb2.ScrapeRequest.SerializeToString,
            proto_dot_scrape__pb2.ScrapeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsScrapingDone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scrape.ScrapeService/IsScrapingDone',
            proto_dot_scrape__pb2.ScrapeStatusRequest.SerializeToString,
            proto_dot_scrape__pb2.ScrapeStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetScrapingBlob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/scrape.ScrapeService/GetScrapingBlob',
            proto_dot_scrape__pb2.ScrapeBlobRequest.SerializeToString,
            proto_dot_scrape__pb2.ScrapeBlobResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
